Expected {expBinaryName = "tests/samples/global-max-good.x86.exe", expEntryPoints = [EntryPoint (Address {addrSegmentBase = 0, addrSegmentOffset = 4194304, addrSegoffOffset = 418, addrPretty = "0x4001a2"}),EntryPoint (Address {addrSegmentBase = 0, addrSegmentOffset = 4194304, addrSegoffOffset = 418, addrPretty = "0x4001a2"}),EntryPoint (Address {addrSegmentBase = 0, addrSegmentOffset = 4194304, addrSegoffOffset = 344, addrPretty = "0x400158"})], expFunctions = [Function (Address {addrSegmentBase = 0, addrSegmentOffset = 4194304, addrSegoffOffset = 344, addrPretty = "0x400158"}) [Block (Address {addrSegmentBase = 0, addrSegmentOffset = 4194304, addrSegoffOffset = 344, addrPretty = "0x400158"}) "StatementList {stmtsIdent = 0, stmtsNonterm = [# 0x0 push   rbp,r21 := (bv_add rsp_0 (0xfffffffffffffff8 :: [64])),write_mem r21 rbp_0,# 0x400158: {rip => 0x400159\n            ;rsp => r21},# 0x1 mov    rbp,rsp,# 0x400159: {rip => 0x40015c\n            ;rbp => r21},# 0x4 mov    QWORD PTR [rbp-0x18],rdi,r22 := (bv_add rsp_0 (0xffffffffffffffe0 :: [64])),write_mem r22 rdi_0,# 0x40015c: {rip => 0x400160},# 0x8 mov    QWORD PTR [rbp-0x20],rsi,r23 := (bv_add rsp_0 (0xffffffffffffffd8 :: [64])),write_mem r23 rsi_0,# 0x400160: {rip => 0x400164},# 0xc mov    rax,QWORD PTR [rbp-0x18],r24 := read_mem r22 (bvle 8),# 0x400164: {rip => 0x400168\n            ;rax => r24},# 0x10 mov    QWORD PTR [rbp-0x8],rax,r25 := (bv_add rsp_0 (0xfffffffffffffff0 :: [64])),write_mem r25 r24,# 0x400168: {rip => 0x40016c},# 0x14 mov    rax,QWORD PTR [rbp-0x8],r26 := read_mem r25 (bvle 8),# 0x40016c: {rip => 0x400170\n            ;rax => r26},# 0x18 cmp    rax,QWORD PTR [rbp-0x20],r27 := read_mem r23 (bvle 8),r28 := (ssbb_overflows r26 r27 false),r29 := (trunc r26 4),r30 := (trunc r27 4),r31 := (bv_ult r29 r30),r32 := (bv_ult r26 r27),r33 := (bv_sub r26 r27),r34 := (bv_slt r33 (0x0 :: [64])),r35 := (eq r26 r27),r36 := (trunc r33 8),r37 := (even_parity r36),# 0x400170: {rip => 0x400174\n            ;cf => r32\n            ;pf => r37\n            ;af => r31\n            ;zf => r35\n            ;sf => r34\n            ;of => r28},# 0x1c jg     pc+8,r38 := (not r35),r39 := (eq r34 r28),r40 := (and r38 r39),r41 := (mux r40 (0x40017e) (0x400176)),# 0x400174: {rip => r41}], stmtsTerm = ite r40\n{\n  \n  jump 0x40017e\n    { rip = 0x40017e\n    , rax = r26\n    , rsp = r21\n    , rbp = r21\n    , cf = r32\n    , pf = r37\n    , af = r31\n    , zf = r35\n    , sf = r34\n    , df = false\n    , of = r28\n    , x87top = 0x7 :: [3]\n    }\n}\n{\n  \n  jump 0x400176\n    { rip = 0x400176\n    , rax = r26\n    , rsp = r21\n    , rbp = r21\n    , cf = r32\n    , pf = r37\n    , af = r31\n    , zf = r35\n    , sf = r34\n    , df = false\n    , of = r28\n    , x87top = 0x7 :: [3]\n    }\n}, stmtsAbsState = registers:\n  { rip = code {0x400158}\n  , rsp = {rsp_0x400158 + 0}\n  , df = False\n  , x87top = finset {7}\n  }\nstack:\n  0x0 := return_addr}",Block (Address {addrSegmentBase = 0, addrSegmentOffset = 4194304, addrSegoffOffset = 374, addrPretty = "0x400176"}) "StatementList {stmtsIdent = 0, stmtsNonterm = [# 0x0 mov    rax,QWORD PTR [rbp-0x20],r117 := (bv_add rbp_0 (0xffffffffffffffe0 :: [64])),r118 := read_mem r117 (bvle 8),# 0x400176: {rip => 0x40017a\n            ;rax => r118},# 0x4 mov    QWORD PTR [rbp-0x8],rax,r119 := (bv_add rbp_0 (0xfffffffffffffff8 :: [64])),write_mem r119 r118,# 0x40017a: {rip => 0x40017e}], stmtsTerm = jump 0x40017e\n  { rip = 0x40017e\n  , rax = r118\n  , df = false\n  , x87top = 0x7 :: [3]\n  }, stmtsAbsState = registers:\n  { rip = code {0x400176}\n  , rsp = {rsp_0x400158 - 8}\n  , rbp = {rsp_0x400158 - 8}\n  , df = False\n  , x87top = finset {7}\n  }\nstack:\n  0x0 := return_addr}",Block (Address {addrSegmentBase = 0, addrSegmentOffset = 4194304, addrSegoffOffset = 382, addrPretty = "0x40017e"}) "StatementList {stmtsIdent = 0, stmtsNonterm = [# 0x0 mov    rax,0x601000,# 0x40017e: {rip => 0x400185\n            ;rax => 0x601000 :: [64]},# 0x7 mov    rax,QWORD PTR [rax],r97 := read_mem (0x601000 :: [64]) (bvle 8),# 0x400185: {rip => 0x400188\n            ;rax => r97},# 0xa cmp    QWORD PTR [rbp-0x8],rax,r98 := (bv_add rbp_0 (0xfffffffffffffff8 :: [64])),r99 := read_mem r98 (bvle 8),r100 := (ssbb_overflows r99 r97 false),r101 := (trunc r99 4),r102 := (trunc r97 4),r103 := (bv_ult r101 r102),r104 := (bv_ult r99 r97),r105 := (bv_sub r99 r97),r106 := (bv_slt r105 (0x0 :: [64])),r107 := (eq r99 r97),r108 := (trunc r105 8),r109 := (even_parity r108),# 0x400188: {rip => 0x40018c\n            ;cf => r104\n            ;pf => r109\n            ;af => r103\n            ;zf => r107\n            ;sf => r106\n            ;of => r100},# 0xe jg     pc+e,r110 := (not r107),r111 := (eq r106 r100),r112 := (and r110 r111),r113 := (mux r112 (0x40019c) (0x40018e)),# 0x40018c: {rip => r113}], stmtsTerm = ite r112\n{\n  \n  jump 0x40019c\n    { rip = 0x40019c\n    , rax = r97\n    , cf = r104\n    , pf = r109\n    , af = r103\n    , zf = r107\n    , sf = r106\n    , df = false\n    , of = r100\n    , x87top = 0x7 :: [3]\n    }\n}\n{\n  \n  jump 0x40018e\n    { rip = 0x40018e\n    , rax = r97\n    , cf = r104\n    , pf = r109\n    , af = r103\n    , zf = r107\n    , sf = r106\n    , df = false\n    , of = r100\n    , x87top = 0x7 :: [3]\n    }\n}, stmtsAbsState = registers:\n  { rip = code {0x40017e}\n  , rsp = {rsp_0x400158 - 8}\n  , rbp = {rsp_0x400158 - 8}\n  , df = False\n  , x87top = finset {7}\n  }\nstack:\n  0x0 := return_addr}",Block (Address {addrSegmentBase = 0, addrSegmentOffset = 4194304, addrSegoffOffset = 398, addrPretty = "0x40018e"}) "StatementList {stmtsIdent = 0, stmtsNonterm = [# 0x0 mov    rax,0x601000,# 0x40018e: {rip => 0x400195\n            ;rax => 0x601000 :: [64]},# 0x7 mov    rax,QWORD PTR [rax],r148 := read_mem (0x601000 :: [64]) (bvle 8),# 0x400195: {rip => 0x400198\n            ;rax => r148},# 0xa mov    QWORD PTR [rbp-0x8],rax,r149 := (bv_add rbp_0 (0xfffffffffffffff8 :: [64])),write_mem r149 r148,# 0x400198: {rip => 0x40019c}], stmtsTerm = jump 0x40019c\n  { rip = 0x40019c\n  , rax = r148\n  , df = false\n  , x87top = 0x7 :: [3]\n  }, stmtsAbsState = registers:\n  { rip = code {0x40018e}\n  , rsp = {rsp_0x400158 - 8}\n  , rbp = {rsp_0x400158 - 8}\n  , df = False\n  , x87top = finset {7}\n  }\nstack:\n  0x0 := return_addr}",Block (Address {addrSegmentBase = 0, addrSegmentOffset = 4194304, addrSegoffOffset = 412, addrPretty = "0x40019c"}) "StatementList {stmtsIdent = 0, stmtsNonterm = [# 0x0 mov    rax,QWORD PTR [rbp-0x8],r140 := (bv_add rbp_0 (0xfffffffffffffff8 :: [64])),r141 := read_mem r140 (bvle 8),# 0x40019c: {rip => 0x4001a0\n            ;rax => r141},# 0x4 pop    rbp,r142 := read_mem rsp_0 (bvle 8),r143 := (bv_add rsp_0 (0x8 :: [64])),# 0x4001a0: {rip => 0x4001a1\n            ;rsp => r143\n            ;rbp => r142},# 0x5 ret,r144 := read_mem r143 (bvle 8),r145 := (bv_add rsp_0 (0x10 :: [64])),# 0x4001a1: {rip => r144\n            ;rsp => r145}], stmtsTerm = return\n  { rip = r144\n  , rax = r141\n  , rsp = r145\n  , rbp = r142\n  , df = false\n  , x87top = 0x7 :: [3]\n  }, stmtsAbsState = registers:\n  { rip = code {0x40019c}\n  , rsp = {rsp_0x400158 - 8}\n  , rbp = {rsp_0x400158 - 8}\n  , df = False\n  , x87top = finset {7}\n  }\nstack:\n  0x0 := return_addr}"],Function (Address {addrSegmentBase = 0, addrSegmentOffset = 4194304, addrSegoffOffset = 418, addrPretty = "0x4001a2"}) [Block (Address {addrSegmentBase = 0, addrSegmentOffset = 4194304, addrSegoffOffset = 418, addrPretty = "0x4001a2"}) "StatementList {stmtsIdent = 0, stmtsNonterm = [# 0x0 push   rbp,r9 := (bv_add rsp_0 (0xfffffffffffffff8 :: [64])),write_mem r9 rbp_0,# 0x4001a2: {rip => 0x4001a3\n            ;rsp => r9},# 0x1 mov    rbp,rsp,# 0x4001a3: {rip => 0x4001a6\n            ;rbp => r9},# 0x4 sub    rsp,0x10,r10 := (ssbb_overflows r9 (0x10 :: [64]) false),r11 := (bv_ult r9 (0x10 :: [64])),r12 := (bv_add rsp_0 (0xffffffffffffffe8 :: [64])),r13 := (bv_slt r12 (0x0 :: [64])),r14 := (eq rsp_0 (0x18 :: [64])),r15 := (trunc r12 8),r16 := (even_parity r15),# 0x4001a6: {rip => 0x4001aa\n            ;rsp => r12\n            ;cf => r11\n            ;pf => r16\n            ;af => false\n            ;zf => r14\n            ;sf => r13\n            ;of => r10},# 0x8 mov    esi,0x4,# 0x4001aa: {rip => 0x4001af\n            ;rsi => 0x4 :: [64]},# 0xd mov    edi,0x3,# 0x4001af: {rip => 0x4001b4\n            ;rdi => 0x3 :: [64]},# 0x12 call   pc+-61,r17 := (bv_add rsp_0 (0xffffffffffffffe0 :: [64])),write_mem r17 0x4001b9,# 0x4001b4: {rip => 0x400158\n            ;rsp => r17}], stmtsTerm = call and return to 0x4001b9\n  { rip = 0x400158\n  , rsp = r17\n  , rbp = r9\n  , rsi = 0x4 :: [64]\n  , rdi = 0x3 :: [64]\n  , cf = r11\n  , pf = r16\n  , af = false\n  , zf = r14\n  , sf = r13\n  , df = false\n  , of = r10\n  , x87top = 0x7 :: [3]\n  }, stmtsAbsState = registers:\n  { rip = code {0x4001a2}\n  , rsp = {rsp_0x4001a2 + 0}\n  , df = False\n  , x87top = finset {7}\n  }\nstack:\n  0x0 := return_addr\n  -0x20 := code {0x4001b9}}",Block (Address {addrSegmentBase = 0, addrSegmentOffset = 4194304, addrSegoffOffset = 441, addrPretty = "0x4001b9"}) "StatementList {stmtsIdent = 0, stmtsNonterm = [# 0x0 mov    QWORD PTR [rbp-0x8],rax,r23 := (bv_add rbp_0 (0xfffffffffffffff8 :: [64])),write_mem r23 rax_0,# 0x4001b9: {rip => 0x4001bd},# 0x4 nop,# 0x4001bd: {rip => 0x4001be},# 0x5 leave,r24 := read_mem rbp_0 (bvle 8),r25 := (bv_add rbp_0 (0x8 :: [64])),# 0x4001be: {rip => 0x4001bf\n            ;rsp => r25\n            ;rbp => r24},# 0x6 ret,r26 := read_mem r25 (bvle 8),r27 := (bv_add rbp_0 (0x10 :: [64])),# 0x4001bf: {rip => r26\n            ;rsp => r27}], stmtsTerm = return\n  { rip = r26\n  , rsp = r27\n  , rbp = r24\n  , df = false\n  , x87top = 0x7 :: [3]\n  }, stmtsAbsState = registers:\n  { rip = code {0x4001b9}\n  , rsp = {rsp_0x4001a2 - 18}\n  , rbp = {rsp_0x4001a2 - 8}\n  , df = False\n  , x87top = finset {7}\n  }\nstack:\n  0x0 := return_addr\n  -0x20 := code {0x4001b9}}"]]}