Expected {expBinaryName = "tests/samples/looping.x86.exe", expEntryPoints = [EntryPoint (Address {addrSegmentBase = 0, addrSegmentOffset = 4194304, addrSegoffOffset = 493, addrPretty = "0x4001ed"}),EntryPoint (Address {addrSegmentBase = 0, addrSegmentOffset = 4194304, addrSegoffOffset = 462, addrPretty = "0x4001ce"}),EntryPoint (Address {addrSegmentBase = 0, addrSegmentOffset = 4194304, addrSegoffOffset = 344, addrPretty = "0x400158"}),EntryPoint (Address {addrSegmentBase = 0, addrSegmentOffset = 4194304, addrSegoffOffset = 493, addrPretty = "0x4001ed"})], expFunctions = [Function (Address {addrSegmentBase = 0, addrSegmentOffset = 4194304, addrSegoffOffset = 344, addrPretty = "0x400158"}) [Block (Address {addrSegmentBase = 0, addrSegmentOffset = 4194304, addrSegoffOffset = 344, addrPretty = "0x400158"}) "StatementList {stmtsIdent = 0, stmtsNonterm = [# 0x0 push   rbp,r15 := (bv_add rsp_0 (0xfffffffffffffff8 :: [64])),write_mem r15 rbp_0,# 0x400158: {rip => 0x400159\n            ;rsp => r15},# 0x1 mov    rbp,rsp,# 0x400159: {rip => 0x40015c\n            ;rbp => r15},# 0x4 sub    rsp,0x20,r16 := (ssbb_overflows r15 (0x20 :: [64]) false),r17 := (bv_ult r15 (0x20 :: [64])),r18 := (bv_add rsp_0 (0xffffffffffffffd8 :: [64])),r19 := (bv_slt r18 (0x0 :: [64])),r20 := (eq rsp_0 (0x28 :: [64])),r21 := (trunc r18 8),r22 := (even_parity r21),# 0x40015c: {rip => 0x400160\n            ;rsp => r18\n            ;cf => r17\n            ;pf => r22\n            ;af => false\n            ;zf => r20\n            ;sf => r19\n            ;of => r16},# 0x8 mov    QWORD PTR [rbp-0x18],rdi,r23 := (bv_add rsp_0 (0xffffffffffffffe0 :: [64])),write_mem r23 rdi_0,# 0x400160: {rip => 0x400164},# 0xc mov    QWORD PTR [rbp-0x20],rsi,write_mem r18 rsi_0,# 0x400164: {rip => 0x400168},# 0x10 cmp    QWORD PTR [rbp-0x18],0x0,r24 := read_mem r23 (bvle 8),r25 := (bv_slt r24 (0x0 :: [64])),r26 := (eq r24 (0x0 :: [64])),r27 := (trunc r24 8),r28 := (even_parity r27),# 0x400168: {rip => 0x40016d\n            ;cf => false\n            ;pf => r28\n            ;af => false\n            ;zf => r26\n            ;sf => r25\n            ;of => false},# 0x15 jne    pc+6,r29 := (mux r26 (0x40016f) (0x400175)),# 0x40016d: {rip => r29}], stmtsTerm = ite r26\n{\n  \n  jump 0x40016f\n    { rip = 0x40016f\n    , rsp = r18\n    , rbp = r15\n    , cf = false\n    , pf = r28\n    , af = false\n    , zf = r26\n    , sf = r25\n    , df = false\n    , of = false\n    , x87top = 0x7 :: [3]\n    }\n}\n{\n  \n  jump 0x400175\n    { rip = 0x400175\n    , rsp = r18\n    , rbp = r15\n    , cf = false\n    , pf = r28\n    , af = false\n    , zf = r26\n    , sf = r25\n    , df = false\n    , of = false\n    , x87top = 0x7 :: [3]\n    }\n}, stmtsAbsState = registers:\n  { rip = code {0x400158}\n  , rsp = {rsp_0x400158 + 0}\n  , df = False\n  , x87top = finset {7}\n  }\nstack:\n  0x0 := return_addr}",Block (Address {addrSegmentBase = 0, addrSegmentOffset = 4194304, addrSegoffOffset = 367, addrPretty = "0x40016f"}) "StatementList {stmtsIdent = 0, stmtsNonterm = [# 0x0 mov    rax,QWORD PTR [rbp-0x20],r32 := (bv_add rbp_0 (0xffffffffffffffe0 :: [64])),r33 := read_mem r32 (bvle 8),# 0x40016f: {rip => 0x400173\n            ;rax => r33},# 0x4 jmp    pc+57,# 0x400173: {rip => 0x4001cc}], stmtsTerm = jump 0x4001cc\n  { rip = 0x4001cc\n  , rax = r33\n  , df = false\n  , x87top = 0x7 :: [3]\n  }, stmtsAbsState = registers:\n  { rip = code {0x40016f}\n  , rsp = {rsp_0x400158 - 28}\n  , rbp = {rsp_0x400158 - 8}\n  , cf = False\n  , af = False\n  , zf = True\n  , df = False\n  , of = False\n  , x87top = finset {7}\n  }\nstack:\n  0x0 := return_addr}",Block (Address {addrSegmentBase = 0, addrSegmentOffset = 4194304, addrSegoffOffset = 373, addrPretty = "0x400175"}) "StatementList {stmtsIdent = 0, stmtsNonterm = [# 0x0 mov    DWORD PTR [rbp-0x4],0x0,r35 := (bv_add rbp_0 (0xfffffffffffffffc :: [64])),write_mem r35 0x0 :: [32],# 0x400175: {rip => 0x40017c},# 0x7 jmp    pc+d,# 0x40017c: {rip => 0x40018b}], stmtsTerm = jump 0x40018b\n  { rip = 0x40018b\n  , df = false\n  , x87top = 0x7 :: [3]\n  }, stmtsAbsState = registers:\n  { rip = code {0x400175}\n  , rsp = {rsp_0x400158 - 28}\n  , rbp = {rsp_0x400158 - 8}\n  , cf = False\n  , af = False\n  , zf = False\n  , df = False\n  , of = False\n  , x87top = finset {7}\n  }\nstack:\n  0x0 := return_addr\n  -0xc := finset {0}}",Block (Address {addrSegmentBase = 0, addrSegmentOffset = 4194304, addrSegoffOffset = 382, addrPretty = "0x40017e"}) "StatementList {stmtsIdent = 0, stmtsNonterm = [# 0x0 add    QWORD PTR [rbp-0x20],0x2,r886 := (bv_add rbp_0 (0xffffffffffffffe0 :: [64])),r887 := read_mem r886 (bvle 8),r888 := (sadc_overflows r887 (0x2 :: [64]) false),r889 := (trunc r887 4),r890 := (uadc_overflows r889 (0x2 :: [4]) false),r891 := (uadc_overflows r887 (0x2 :: [64]) false),r892 := (bv_add r887 (0x2 :: [64])),r893 := (bv_slt r892 (0x0 :: [64])),r894 := (eq r887 (0xfffffffffffffffe :: [64])),r895 := (trunc r892 8),r896 := (even_parity r895),write_mem r886 r892,# 0x40017e: {rip => 0x400183\n            ;cf => r891\n            ;pf => r896\n            ;af => r890\n            ;zf => r894\n            ;sf => r893\n            ;of => r888},# 0x5 add    DWORD PTR [rbp-0x4],0x1,r897 := (bv_add rbp_0 (0xfffffffffffffffc :: [64])),r898 := read_mem r897 (bvle 4),r899 := (sadc_overflows r898 (0x1 :: [32]) false),r900 := (trunc r898 4),r901 := (uadc_overflows r900 (0x1 :: [4]) false),r902 := (uadc_overflows r898 (0x1 :: [32]) false),r903 := (bv_add r898 (0x1 :: [32])),r904 := (bv_slt r903 (0x0 :: [32])),r905 := (eq r898 (0xffffffff :: [32])),r906 := (trunc r903 8),r907 := (even_parity r906),write_mem r897 r903,# 0x400183: {rip => 0x400187\n            ;cf => r902\n            ;pf => r907\n            ;af => r901\n            ;zf => r905\n            ;sf => r904\n            ;of => r899},# 0x9 add    DWORD PTR [rbp-0x4],0x1,r908 := read_mem r897 (bvle 4),r909 := (sadc_overflows r908 (0x1 :: [32]) false),r910 := (trunc r908 4),r911 := (uadc_overflows r910 (0x1 :: [4]) false),r912 := (uadc_overflows r908 (0x1 :: [32]) false),r913 := (bv_add r908 (0x1 :: [32])),r914 := (bv_slt r913 (0x0 :: [32])),r915 := (eq r908 (0xffffffff :: [32])),r916 := (trunc r913 8),r917 := (even_parity r916),write_mem r897 r913,# 0x400187: {rip => 0x40018b\n            ;cf => r912\n            ;pf => r917\n            ;af => r911\n            ;zf => r915\n            ;sf => r914\n            ;of => r909}], stmtsTerm = jump 0x40018b\n  { rip = 0x40018b\n  , cf = r912\n  , pf = r917\n  , af = r911\n  , zf = r915\n  , sf = r914\n  , df = false\n  , of = r909\n  , x87top = 0x7 :: [3]\n  }, stmtsAbsState = registers:\n  { rip = code {0x40017e}\n  , rsp = {rsp_0x400158 - 28}\n  , rbp = {rsp_0x400158 - 8}\n  , df = False\n  , x87top = finset {7}\n  }\nstack:\n  0x0 := return_addr}",Block (Address {addrSegmentBase = 0, addrSegmentOffset = 4194304, addrSegoffOffset = 395, addrPretty = "0x40018b"}) "StatementList {stmtsIdent = 0, stmtsNonterm = [# 0x0 mov    eax,DWORD PTR [rbp-0x4],r823 := (bv_add rbp_0 (0xfffffffffffffffc :: [64])),r824 := read_mem r823 (bvle 4),r825 := (uext r824 64),# 0x40018b: {rip => 0x40018e\n            ;rax => r825},# 0x3 movsxd rdx,eax,r826 := (sext r824 64),# 0x40018e: {rip => 0x400191\n            ;rdx => r826},# 0x6 mov    eax,0x6,# 0x400191: {rip => 0x400196\n            ;rax => 0x6 :: [64]},# 0xb cmp    QWORD PTR [rbp-0x18],0x6,r827 := (bv_add rbp_0 (0xffffffffffffffe8 :: [64])),r828 := read_mem r827 (bvle 8),r829 := (ssbb_overflows r828 (0x6 :: [64]) false),r830 := (trunc r828 4),r831 := (bv_ult r830 (0x6 :: [4])),r832 := (bv_ult r828 (0x6 :: [64])),r833 := (bv_add r828 (0xfffffffffffffffa :: [64])),r834 := (bv_slt r833 (0x0 :: [64])),r835 := (eq r828 (0x6 :: [64])),r836 := (trunc r833 8),r837 := (even_parity r836),# 0x400196: {rip => 0x40019b\n            ;cf => r832\n            ;pf => r837\n            ;af => r831\n            ;zf => r835\n            ;sf => r834\n            ;of => r829},# 0x10 cmovle rax,QWORD PTR [rbp-0x18],r838 := read_mem r827 (bvle 8),r839 := (xor r834 r829),r840 := (or r835 r839),r841 := (mux r840 r838 (0x6 :: [64])),# 0x40019b: {rip => 0x4001a0\n            ;rax => r841},# 0x15 cmp    rdx,rax,r842 := (ssbb_overflows r826 r841 false),r843 := (trunc r824 4),r844 := (trunc r841 4),r845 := (bv_ult r843 r844),r846 := (bv_ult r826 r841),r847 := (bv_sub r826 r841),r848 := (bv_slt r847 (0x0 :: [64])),r849 := (eq r826 r841),r850 := (trunc r847 8),r851 := (even_parity r850),# 0x4001a0: {rip => 0x4001a3\n            ;cf => r846\n            ;pf => r851\n            ;af => r845\n            ;zf => r849\n            ;sf => r848\n            ;of => r842},# 0x18 jl     pc+-27,r852 := (xor r848 r842),r853 := (mux r852 (0x40017e) (0x4001a5)),# 0x4001a3: {rip => r853}], stmtsTerm = ite r852\n{\n  \n  jump 0x40017e\n    { rip = 0x40017e\n    , rax = r841\n    , rdx = r826\n    , cf = r846\n    , pf = r851\n    , af = r845\n    , zf = r849\n    , sf = r848\n    , df = false\n    , of = r842\n    , x87top = 0x7 :: [3]\n    }\n}\n{\n  \n  jump 0x4001a5\n    { rip = 0x4001a5\n    , rax = r841\n    , rdx = r826\n    , cf = r846\n    , pf = r851\n    , af = r845\n    , zf = r849\n    , sf = r848\n    , df = false\n    , of = r842\n    , x87top = 0x7 :: [3]\n    }\n}, stmtsAbsState = registers:\n  { rip = code {0x40018b}\n  , rsp = {rsp_0x400158 - 28}\n  , rbp = {rsp_0x400158 - 8}\n  , df = False\n  , x87top = finset {7}\n  }\nstack:\n  0x0 := return_addr}",Block (Address {addrSegmentBase = 0, addrSegmentOffset = 4194304, addrSegoffOffset = 421, addrPretty = "0x4001a5"}) "StatementList {stmtsIdent = 0, stmtsNonterm = [# 0x0 mov    eax,DWORD PTR [rbp-0x4],r950 := (bv_add rbp_0 (0xfffffffffffffffc :: [64])),r951 := read_mem r950 (bvle 4),r952 := (uext r951 64),# 0x4001a5: {rip => 0x4001a8\n            ;rax => r952},# 0x3 movsxd rdx,eax,r953 := (sext r951 64),# 0x4001a8: {rip => 0x4001ab\n            ;rdx => r953},# 0x6 mov    rax,QWORD PTR [rbp-0x20],r954 := (bv_add rbp_0 (0xffffffffffffffe0 :: [64])),r955 := read_mem r954 (bvle 8),# 0x4001ab: {rip => 0x4001af\n            ;rax => r955},# 0xa add    rdx,rax,r956 := (sadc_overflows r953 r955 false),r957 := (trunc r951 4),r958 := (trunc r955 4),r959 := (uadc_overflows r957 r958 false),r960 := (uadc_overflows r953 r955 false),r961 := (bv_add r953 r955),r962 := (bv_slt r961 (0x0 :: [64])),r963 := (eq r961 (0x0 :: [64])),r964 := (trunc r961 8),r965 := (even_parity r964),# 0x4001af: {rip => 0x4001b2\n            ;rdx => r961\n            ;cf => r960\n            ;pf => r965\n            ;af => r959\n            ;zf => r963\n            ;sf => r962\n            ;of => r956},# 0xd mov    eax,DWORD PTR [rbp-0x4],r966 := read_mem r950 (bvle 4),r967 := (uext r966 64),# 0x4001b2: {rip => 0x4001b5\n            ;rax => r967},# 0x10 cdqe,r968 := (sext r966 64),# 0x4001b5: {rip => 0x4001b7\n            ;rax => r968},# 0x12 mov    rcx,QWORD PTR [rbp-0x18],r969 := (bv_add rbp_0 (0xffffffffffffffe8 :: [64])),r970 := read_mem r969 (bvle 8),# 0x4001b7: {rip => 0x4001bb\n            ;rcx => r970},# 0x16 sub    rcx,rax,r971 := (ssbb_overflows r970 r968 false),r972 := (trunc r970 4),r973 := (trunc r966 4),r974 := (bv_ult r972 r973),r975 := (bv_ult r970 r968),r976 := (bv_sub r970 r968),r977 := (bv_slt r976 (0x0 :: [64])),r978 := (eq r970 r968),r979 := (trunc r976 8),r980 := (even_parity r979),# 0x4001bb: {rip => 0x4001be\n            ;rcx => r976\n            ;cf => r975\n            ;pf => r980\n            ;af => r974\n            ;zf => r978\n            ;sf => r977\n            ;of => r971},# 0x19 mov    rax,rcx,# 0x4001be: {rip => 0x4001c1\n            ;rax => r976},# 0x1c mov    rsi,rdx,# 0x4001c1: {rip => 0x4001c4\n            ;rsi => r961},# 0x1f mov    rdi,rax,# 0x4001c4: {rip => 0x4001c7\n            ;rdi => r976},# 0x22 call   pc+-74,r981 := (bv_add rsp_0 (0xfffffffffffffff8 :: [64])),write_mem r981 0x4001cc,# 0x4001c7: {rip => 0x400158\n            ;rsp => r981}], stmtsTerm = call and return to 0x4001cc\n  { rip = 0x400158\n  , rax = r976\n  , rcx = r976\n  , rdx = r961\n  , rsp = r981\n  , rsi = r961\n  , rdi = r976\n  , cf = r975\n  , pf = r980\n  , af = r974\n  , zf = r978\n  , sf = r977\n  , df = false\n  , of = r971\n  , x87top = 0x7 :: [3]\n  }, stmtsAbsState = registers:\n  { rip = code {0x4001a5}\n  , rsp = {rsp_0x400158 - 28}\n  , rbp = {rsp_0x400158 - 8}\n  , df = False\n  , x87top = finset {7}\n  }\nstack:\n  0x0 := return_addr\n  -0x30 := code {0x4001cc}}",Block (Address {addrSegmentBase = 0, addrSegmentOffset = 4194304, addrSegoffOffset = 460, addrPretty = "0x4001cc"}) "StatementList {stmtsIdent = 0, stmtsNonterm = [# 0x0 leave,r986 := read_mem rbp_0 (bvle 8),r987 := (bv_add rbp_0 (0x8 :: [64])),# 0x4001cc: {rip => 0x4001cd\n            ;rsp => r987\n            ;rbp => r986},# 0x1 ret,r988 := read_mem r987 (bvle 8),r989 := (bv_add rbp_0 (0x10 :: [64])),# 0x4001cd: {rip => r988\n            ;rsp => r989}], stmtsTerm = return\n  { rip = r988\n  , rsp = r989\n  , rbp = r986\n  , df = false\n  , x87top = 0x7 :: [3]\n  }, stmtsAbsState = registers:\n  { rip = code {0x4001cc}\n  , rsp = {rsp_0x400158 - 28}\n  , rbp = {rsp_0x400158 - 8}\n  , df = False\n  , x87top = finset {7}\n  }\nstack:\n  0x0 := return_addr}"],Function (Address {addrSegmentBase = 0, addrSegmentOffset = 4194304, addrSegoffOffset = 462, addrPretty = "0x4001ce"}) [Block (Address {addrSegmentBase = 0, addrSegmentOffset = 4194304, addrSegoffOffset = 462, addrPretty = "0x4001ce"}) "StatementList {stmtsIdent = 0, stmtsNonterm = [# 0x0 push   rbp,r11 := (bv_add rsp_0 (0xfffffffffffffff8 :: [64])),write_mem r11 rbp_0,# 0x4001ce: {rip => 0x4001cf\n            ;rsp => r11},# 0x1 mov    rbp,rsp,# 0x4001cf: {rip => 0x4001d2\n            ;rbp => r11},# 0x4 sub    rsp,0x10,r12 := (ssbb_overflows r11 (0x10 :: [64]) false),r13 := (bv_ult r11 (0x10 :: [64])),r14 := (bv_add rsp_0 (0xffffffffffffffe8 :: [64])),r15 := (bv_slt r14 (0x0 :: [64])),r16 := (eq rsp_0 (0x18 :: [64])),r17 := (trunc r14 8),r18 := (even_parity r17),# 0x4001d2: {rip => 0x4001d6\n            ;rsp => r14\n            ;cf => r13\n            ;pf => r18\n            ;af => false\n            ;zf => r16\n            ;sf => r15\n            ;of => r12},# 0x8 mov    QWORD PTR [rbp-0x8],rdi,r19 := (bv_add rsp_0 (0xfffffffffffffff0 :: [64])),write_mem r19 rdi_0,# 0x4001d6: {rip => 0x4001da},# 0xc mov    rax,QWORD PTR [rbp-0x8],r20 := read_mem r19 (bvle 8),# 0x4001da: {rip => 0x4001de\n            ;rax => r20},# 0x10 mov    esi,0x0,# 0x4001de: {rip => 0x4001e3\n            ;rsi => 0x0 :: [64]},# 0x15 mov    rdi,rax,# 0x4001e3: {rip => 0x4001e6\n            ;rdi => r20},# 0x18 call   pc+-93,r21 := (bv_add rsp_0 (0xffffffffffffffe0 :: [64])),write_mem r21 0x4001eb,# 0x4001e6: {rip => 0x400158\n            ;rsp => r21}], stmtsTerm = call and return to 0x4001eb\n  { rip = 0x400158\n  , rax = r20\n  , rsp = r21\n  , rbp = r11\n  , rsi = 0x0 :: [64]\n  , rdi = r20\n  , cf = r13\n  , pf = r18\n  , af = false\n  , zf = r16\n  , sf = r15\n  , df = false\n  , of = r12\n  , x87top = 0x7 :: [3]\n  }, stmtsAbsState = registers:\n  { rip = code {0x4001ce}\n  , rsp = {rsp_0x4001ce + 0}\n  , df = False\n  , x87top = finset {7}\n  }\nstack:\n  0x0 := return_addr\n  -0x20 := code {0x4001eb}}",Block (Address {addrSegmentBase = 0, addrSegmentOffset = 4194304, addrSegoffOffset = 491, addrPretty = "0x4001eb"}) "StatementList {stmtsIdent = 0, stmtsNonterm = [# 0x0 leave,r26 := read_mem rbp_0 (bvle 8),r27 := (bv_add rbp_0 (0x8 :: [64])),# 0x4001eb: {rip => 0x4001ec\n            ;rsp => r27\n            ;rbp => r26},# 0x1 ret,r28 := read_mem r27 (bvle 8),r29 := (bv_add rbp_0 (0x10 :: [64])),# 0x4001ec: {rip => r28\n            ;rsp => r29}], stmtsTerm = return\n  { rip = r28\n  , rsp = r29\n  , rbp = r26\n  , df = false\n  , x87top = 0x7 :: [3]\n  }, stmtsAbsState = registers:\n  { rip = code {0x4001eb}\n  , rsp = {rsp_0x4001ce - 18}\n  , rbp = {rsp_0x4001ce - 8}\n  , df = False\n  , x87top = finset {7}\n  }\nstack:\n  0x0 := return_addr\n  -0x20 := code {0x4001eb}}"],Function (Address {addrSegmentBase = 0, addrSegmentOffset = 4194304, addrSegoffOffset = 493, addrPretty = "0x4001ed"}) [Block (Address {addrSegmentBase = 0, addrSegmentOffset = 4194304, addrSegoffOffset = 493, addrPretty = "0x4001ed"}) "StatementList {stmtsIdent = 0, stmtsNonterm = [# 0x0 push   rbp,r9 := (bv_add rsp_0 (0xfffffffffffffff8 :: [64])),write_mem r9 rbp_0,# 0x4001ed: {rip => 0x4001ee\n            ;rsp => r9},# 0x1 mov    rbp,rsp,# 0x4001ee: {rip => 0x4001f1\n            ;rbp => r9},# 0x4 sub    rsp,0x10,r10 := (ssbb_overflows r9 (0x10 :: [64]) false),r11 := (bv_ult r9 (0x10 :: [64])),r12 := (bv_add rsp_0 (0xffffffffffffffe8 :: [64])),r13 := (bv_slt r12 (0x0 :: [64])),r14 := (eq rsp_0 (0x18 :: [64])),r15 := (trunc r12 8),r16 := (even_parity r15),# 0x4001f1: {rip => 0x4001f5\n            ;rsp => r12\n            ;cf => r11\n            ;pf => r16\n            ;af => false\n            ;zf => r14\n            ;sf => r13\n            ;of => r10},# 0x8 mov    esi,0x4,# 0x4001f5: {rip => 0x4001fa\n            ;rsi => 0x4 :: [64]},# 0xd mov    edi,0x3,# 0x4001fa: {rip => 0x4001ff\n            ;rdi => 0x3 :: [64]},# 0x12 call   pc+-ac,r17 := (bv_add rsp_0 (0xffffffffffffffe0 :: [64])),write_mem r17 0x400204,# 0x4001ff: {rip => 0x400158\n            ;rsp => r17}], stmtsTerm = call and return to 0x400204\n  { rip = 0x400158\n  , rsp = r17\n  , rbp = r9\n  , rsi = 0x4 :: [64]\n  , rdi = 0x3 :: [64]\n  , cf = r11\n  , pf = r16\n  , af = false\n  , zf = r14\n  , sf = r13\n  , df = false\n  , of = r10\n  , x87top = 0x7 :: [3]\n  }, stmtsAbsState = registers:\n  { rip = code {0x4001ed}\n  , rsp = {rsp_0x4001ed + 0}\n  , df = False\n  , x87top = finset {7}\n  }\nstack:\n  0x0 := return_addr\n  -0x20 := code {0x400204}}",Block (Address {addrSegmentBase = 0, addrSegmentOffset = 4194304, addrSegoffOffset = 516, addrPretty = "0x400204"}) "StatementList {stmtsIdent = 0, stmtsNonterm = [# 0x0 mov    QWORD PTR [rbp-0x8],rax,r23 := (bv_add rbp_0 (0xfffffffffffffff8 :: [64])),write_mem r23 rax_0,# 0x400204: {rip => 0x400208},# 0x4 nop,# 0x400208: {rip => 0x400209},# 0x5 leave,r24 := read_mem rbp_0 (bvle 8),r25 := (bv_add rbp_0 (0x8 :: [64])),# 0x400209: {rip => 0x40020a\n            ;rsp => r25\n            ;rbp => r24},# 0x6 ret,r26 := read_mem r25 (bvle 8),r27 := (bv_add rbp_0 (0x10 :: [64])),# 0x40020a: {rip => r26\n            ;rsp => r27}], stmtsTerm = return\n  { rip = r26\n  , rsp = r27\n  , rbp = r24\n  , df = false\n  , x87top = 0x7 :: [3]\n  }, stmtsAbsState = registers:\n  { rip = code {0x400204}\n  , rsp = {rsp_0x4001ed - 18}\n  , rbp = {rsp_0x4001ed - 8}\n  , df = False\n  , x87top = finset {7}\n  }\nstack:\n  0x0 := return_addr\n  -0x20 := code {0x400204}}"]]}