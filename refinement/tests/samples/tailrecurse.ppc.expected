Expected {expBinaryName = "tests/samples/tailrecurse.ppc.exe", expEntryPoints = [EntryPoint (Address {addrSegmentBase = 0, addrSegmentOffset = 268500992, addrSegoffOffset = 192, addrPretty = "0x100100c0"}),EntryPoint (Address {addrSegmentBase = 0, addrSegmentOffset = 268500992, addrSegoffOffset = 0, addrPretty = "0x10010000"}),EntryPoint (Address {addrSegmentBase = 0, addrSegmentOffset = 268500992, addrSegoffOffset = 120, addrPretty = "0x10010078"}),EntryPoint (Address {addrSegmentBase = 0, addrSegmentOffset = 268500992, addrSegoffOffset = 192, addrPretty = "0x100100c0"})], expFunctions = [Function (Address {addrSegmentBase = 0, addrSegmentOffset = 268500992, addrSegoffOffset = 0, addrPretty = "0x10010000"}) [Block (Address {addrSegmentBase = 0, addrSegmentOffset = 268500992, addrSegoffOffset = 0, addrPretty = "0x10010000"}) "StatementList {stmtsIdent = 0, stmtsNonterm = [# 0x0 0x10010000: mflr r0,# 0x10010000: mflr r0,# 0x10010000: {r0 => lnk_0\n              ;ip => 0x10010004},# 0x4 0x10010004: std r31, -8(r1),# 0x10010004: std r31, -8(r1),r58 := (bv_add r1_0 (0xfffffffffffffff8 :: [64])),write_mem r58 r31_0,# 0x10010004: {ip => 0x10010008},# 0x8 0x10010008: std r0, 16(r1),# 0x10010008: std r0, 16(r1),r59 := (bv_add r1_0 (0x10 :: [64])),write_mem r59 lnk_0,# 0x10010008: {ip => 0x1001000c},# 0xc 0x1001000c: stdu r1, -144(r1),# 0x1001000c: stdu r1, -144(r1),r60 := (bv_add r1_0 (0xffffffffffffff70 :: [64])),write_mem r60 r1_0,# 0x1001000c: {r1 => r60\n              ;ip => 0x10010010},# 0x10 0x10010010: or r31, r1, r1,# 0x10010010: or r31, r1, r1,# 0x10010010: {r31 => r60\n              ;ip => 0x10010014},# 0x14 0x10010014: std r3, 120(r31),# 0x10010014: std r3, 120(r31),r61 := (bv_add r1_0 (0xffffffffffffffe8 :: [64])),write_mem r61 r3_0,# 0x10010014: {ip => 0x10010018},# 0x18 0x10010018: std r4, 112(r31),# 0x10010018: std r4, 112(r31),r62 := (bv_add r1_0 (0xffffffffffffffe0 :: [64])),write_mem r62 r4_0,# 0x10010018: {ip => 0x1001001c},# 0x1c 0x1001001c: ld r3, 120(r31),# 0x1001001c: ld r3, 120(r31),r63 := (bv_add r1_0 (0xffffffffffffffe8 :: [64])),r64 := read_mem r63 (bvbe 8),# 0x1001001c: {r3 => r64\n              ;ip => 0x10010020},# 0x20 0x10010020: cmpdi cr0, r3, 0,# 0x10010020: cmpdi cr0, r3, 0,r65 := (bv_slt r64 (0x0 :: [64])),r66 := (bv_slt (0x0 :: [64]) r64),r67 := (bv_and cr_0 (0xfffffff :: [32])),r68 := (mux r66 (0x2 :: [3]) (0x1 :: [3])),r69 := (mux r65 (0x4 :: [3]) r68),r70 := (bv_shr xer_0 (0x1f :: [64])),r71 := (trunc r70 1),r72 := (uext r69 4),r73 := (uext r71 4),r74 := (bv_shl r72 (0x1 :: [4])),r75 := (bv_or r74 r73),r76 := (uext r75 32),r77 := (bv_shl r76 (0x1c :: [32])),r78 := (bv_or r67 r77),# 0x10010020: {ip => 0x10010024\n              ;cr => r78},# 0x24 0x10010024: bc 4, 4*cr0+eq, 16,# 0x10010024: bc 4, 4*cr0+eq, 16,r79 := (bv_shr r78 (0x1d :: [32])),r80 := (trunc r79 1),r81 := (eq r80 (0x1 :: [1])),r87 := (mux r81 (0x10010028) (0x10010034)),# 0x10010024: {ip => r87\n              ;ctr => ctr_0}], stmtsTerm = ite r81\n{\n  \n  jump 0x10010028\n    { r0 = lnk_0\n    , r1 = r60\n    , r3 = r64\n    , r31 = r60\n    , ip = 0x10010028\n    , cr = r78\n    }\n}\n{\n  \n  jump 0x10010034\n    { r0 = lnk_0\n    , r1 = r60\n    , r3 = r64\n    , r31 = r60\n    , ip = 0x10010034\n    , cr = r78\n    }\n}, stmtsAbsState = registers:\n  { r1 = {rsp_0x10010000 + 0}\n  , r2 = finset {10038000}\n  , ip = code {0x10010000}\n  , lnk = return_addr\n  }\nstack:\n  0x10 := return_addr\n  -0x90 := {rsp_0x10010000 + 0}}",Block (Address {addrSegmentBase = 0, addrSegmentOffset = 268500992, addrSegoffOffset = 40, addrPretty = "0x10010028"}) "StatementList {stmtsIdent = 0, stmtsNonterm = [# 0x0 0x10010028: ld r3, 112(r31),# 0x10010028: ld r3, 112(r31),r91 := (bv_add r31_0 (0x70 :: [64])),r92 := read_mem r91 (bvbe 8),# 0x10010028: {r3 => r92\n              ;ip => 0x1001002c},# 0x4 0x1001002c: std r3, 128(r31),# 0x1001002c: std r3, 128(r31),r93 := (bv_add r31_0 (0x80 :: [64])),write_mem r93 r92,# 0x1001002c: {ip => 0x10010030},# 0x8 0x10010030: b 36,# 0x10010030: b 36,# 0x10010030: {ip => 0x10010054}], stmtsTerm = jump 0x10010054\n  { r3 = r92\n  , ip = 0x10010054\n  }, stmtsAbsState = registers:\n  { r0 = return_addr\n  , r1 = {rsp_0x10010000 - 90}\n  , r2 = finset {10038000}\n  , r31 = {rsp_0x10010000 - 90}\n  , ip = code {0x10010028}\n  , lnk = return_addr\n  }\nstack:\n  0x10 := return_addr\n  -0x90 := {rsp_0x10010000 + 0}}",Block (Address {addrSegmentBase = 0, addrSegmentOffset = 268500992, addrSegoffOffset = 52, addrPretty = "0x10010034"}) "StatementList {stmtsIdent = 0, stmtsNonterm = [# 0x0 0x10010034: ld r3, 120(r31),# 0x10010034: ld r3, 120(r31),r102 := (bv_add r31_0 (0x78 :: [64])),r103 := read_mem r102 (bvbe 8),# 0x10010034: {r3 => r103\n              ;ip => 0x10010038},# 0x4 0x10010038: addi r3, r3, -1,# 0x10010038: addi r3, r3, -1,r104 := (bv_add r103 (0xffffffffffffffff :: [64])),# 0x10010038: {r3 => r104\n              ;ip => 0x1001003c},# 0x8 0x1001003c: ld r4, 112(r31),# 0x1001003c: ld r4, 112(r31),r105 := (bv_add r31_0 (0x70 :: [64])),r106 := read_mem r105 (bvbe 8),# 0x1001003c: {r4 => r106\n              ;ip => 0x10010040},# 0xc 0x10010040: ld r5, 120(r31),# 0x10010040: ld r5, 120(r31),r107 := (bv_add r31_0 (0x78 :: [64])),r108 := read_mem r107 (bvbe 8),# 0x10010040: {r5 => r108\n              ;ip => 0x10010044},# 0x10 0x10010044: add r4, r4, r5,# 0x10010044: add r4, r4, r5,r109 := (bv_add r108 r106),# 0x10010044: {r4 => r109\n              ;ip => 0x10010048},# 0x14 0x10010048: bl 65464,# 0x10010048: bl 65464,# 0x10010048: {ip => 0x10020000\n              ;lnk => 0x1001004c}], stmtsTerm = call and return to 0x1001004c\n  { r3 = r104\n  , r4 = r109\n  , r5 = r108\n  , ip = 0x10020000\n  , lnk = 0x1001004c\n  }, stmtsAbsState = registers:\n  { r0 = return_addr\n  , r1 = {rsp_0x10010000 - 90}\n  , r2 = finset {10038000}\n  , r31 = {rsp_0x10010000 - 90}\n  , ip = code {0x10010034}\n  , lnk = return_addr\n  }\nstack:\n  0x10 := return_addr\n  -0x90 := {rsp_0x10010000 + 0}}",Block (Address {addrSegmentBase = 0, addrSegmentOffset = 268500992, addrSegoffOffset = 76, addrPretty = "0x1001004c"}) "StatementList {stmtsIdent = 0, stmtsNonterm = [# 0x0 0x1001004c: nop,# 0x1001004c: nop,# 0x1001004c: {ip => 0x10010050},# 0x4 0x10010050: std r3, 128(r31),# 0x10010050: std r3, 128(r31),r159 := (bv_add r31_0 (0x80 :: [64])),write_mem r159 r3_0,# 0x10010050: {ip => 0x10010054}], stmtsTerm = jump 0x10010054\n  { ip = 0x10010054\n  }, stmtsAbsState = registers:\n  { r1 = {rsp_0x10010000 - 90}\n  , r31 = {rsp_0x10010000 - 90}\n  , ip = code {0x1001004c}\n  }\nstack:\n  0x10 := return_addr\n  -0x90 := {rsp_0x10010000 + 0}}",Block (Address {addrSegmentBase = 0, addrSegmentOffset = 268500992, addrSegoffOffset = 84, addrPretty = "0x10010054"}) "StatementList {stmtsIdent = 0, stmtsNonterm = [# 0x0 0x10010054: ld r3, 128(r31),# 0x10010054: ld r3, 128(r31),r172 := (bv_add r31_0 (0x80 :: [64])),r173 := read_mem r172 (bvbe 8),# 0x10010054: {r3 => r173\n              ;ip => 0x10010058},# 0x4 0x10010058: addi r1, r1, 144,# 0x10010058: addi r1, r1, 144,r174 := (bv_add r1_0 (0x90 :: [64])),# 0x10010058: {r1 => r174\n              ;ip => 0x1001005c},# 0x8 0x1001005c: ld r0, 16(r1),# 0x1001005c: ld r0, 16(r1),r175 := (bv_add r1_0 (0xa0 :: [64])),r176 := read_mem r175 (bvbe 8),# 0x1001005c: {r0 => r176\n              ;ip => 0x10010060},# 0xc 0x10010060: ld r31, -8(r1),# 0x10010060: ld r31, -8(r1),r177 := (bv_add r1_0 (0x88 :: [64])),r178 := read_mem r177 (bvbe 8),# 0x10010060: {r31 => r178\n              ;ip => 0x10010064},# 0x10 0x10010064: mtlr r0,# 0x10010064: mtlr r0,# 0x10010064: {ip => 0x10010068\n              ;lnk => r176},# 0x14 0x10010068: blr,# 0x10010068: blr,r179 := (bv_shr r176 (0x2 :: [64])),r180 := (trunc r179 62),r181 := (uext r180 64),r182 := (bv_shl r181 (0x2 :: [64])),# 0x10010068: {ip => r182}], stmtsTerm = return\n  { r0 = r176\n  , r1 = r174\n  , r3 = r173\n  , r31 = r178\n  , ip = r182\n  , lnk = r176\n  }, stmtsAbsState = registers:\n  { r1 = {rsp_0x10010000 - 90}\n  , r31 = {rsp_0x10010000 - 90}\n  , ip = code {0x10010054}\n  }\nstack:\n  0x10 := return_addr\n  -0x90 := {rsp_0x10010000 + 0}}"],Function (Address {addrSegmentBase = 0, addrSegmentOffset = 268500992, addrSegoffOffset = 120, addrPretty = "0x10010078"}) [Block (Address {addrSegmentBase = 0, addrSegmentOffset = 268500992, addrSegoffOffset = 120, addrPretty = "0x10010078"}) "StatementList {stmtsIdent = 0, stmtsNonterm = [# 0x0 0x10010078: mflr r0,# 0x10010078: mflr r0,# 0x10010078: {r0 => lnk_0\n              ;ip => 0x1001007c},# 0x4 0x1001007c: std r31, -8(r1),# 0x1001007c: std r31, -8(r1),r7 := (bv_add r1_0 (0xfffffffffffffff8 :: [64])),write_mem r7 r31_0,# 0x1001007c: {ip => 0x10010080},# 0x8 0x10010080: std r0, 16(r1),# 0x10010080: std r0, 16(r1),r8 := (bv_add r1_0 (0x10 :: [64])),write_mem r8 lnk_0,# 0x10010080: {ip => 0x10010084},# 0xc 0x10010084: stdu r1, -128(r1),# 0x10010084: stdu r1, -128(r1),r9 := (bv_add r1_0 (0xffffffffffffff80 :: [64])),write_mem r9 r1_0,# 0x10010084: {r1 => r9\n              ;ip => 0x10010088},# 0x10 0x10010088: or r31, r1, r1,# 0x10010088: or r31, r1, r1,# 0x10010088: {r31 => r9\n              ;ip => 0x1001008c},# 0x14 0x1001008c: std r3, 112(r31),# 0x1001008c: std r3, 112(r31),r10 := (bv_add r1_0 (0xfffffffffffffff0 :: [64])),write_mem r10 r3_0,# 0x1001008c: {ip => 0x10010090},# 0x18 0x10010090: ld r3, 112(r31),# 0x10010090: ld r3, 112(r31),r11 := (bv_add r1_0 (0xfffffffffffffff0 :: [64])),r12 := read_mem r11 (bvbe 8),# 0x10010090: {r3 => r12\n              ;ip => 0x10010094},# 0x1c 0x10010094: li r4, 0,# 0x10010094: li r4, 0,# 0x10010094: {r4 => 0x0 :: [64]\n              ;ip => 0x10010098},# 0x20 0x10010098: bl 65384,# 0x10010098: bl 65384,# 0x10010098: {ip => 0x10020000\n              ;lnk => 0x1001009c}], stmtsTerm = call and return to 0x1001009c\n  { r0 = lnk_0\n  , r1 = r9\n  , r3 = r12\n  , r4 = 0x0 :: [64]\n  , r31 = r9\n  , ip = 0x10020000\n  , lnk = 0x1001009c\n  }, stmtsAbsState = registers:\n  { r1 = {rsp_0x10010078 + 0}\n  , r2 = finset {10038000}\n  , ip = code {0x10010078}\n  , lnk = return_addr\n  }\nstack:\n  0x10 := return_addr\n  -0x80 := {rsp_0x10010078 + 0}}",Block (Address {addrSegmentBase = 0, addrSegmentOffset = 268500992, addrSegoffOffset = 156, addrPretty = "0x1001009c"}) "StatementList {stmtsIdent = 0, stmtsNonterm = [# 0x0 0x1001009c: nop,# 0x1001009c: nop,# 0x1001009c: {ip => 0x100100a0},# 0x4 0x100100a0: addi r1, r1, 128,# 0x100100a0: addi r1, r1, 128,r23 := (bv_add r1_0 (0x80 :: [64])),# 0x100100a0: {r1 => r23\n              ;ip => 0x100100a4},# 0x8 0x100100a4: ld r0, 16(r1),# 0x100100a4: ld r0, 16(r1),r24 := (bv_add r1_0 (0x90 :: [64])),r25 := read_mem r24 (bvbe 8),# 0x100100a4: {r0 => r25\n              ;ip => 0x100100a8},# 0xc 0x100100a8: ld r31, -8(r1),# 0x100100a8: ld r31, -8(r1),r26 := (bv_add r1_0 (0x78 :: [64])),r27 := read_mem r26 (bvbe 8),# 0x100100a8: {r31 => r27\n              ;ip => 0x100100ac},# 0x10 0x100100ac: mtlr r0,# 0x100100ac: mtlr r0,# 0x100100ac: {ip => 0x100100b0\n              ;lnk => r25},# 0x14 0x100100b0: blr,# 0x100100b0: blr,r28 := (bv_shr r25 (0x2 :: [64])),r29 := (trunc r28 62),r30 := (uext r29 64),r31 := (bv_shl r30 (0x2 :: [64])),# 0x100100b0: {ip => r31}], stmtsTerm = return\n  { r0 = r25\n  , r1 = r23\n  , r31 = r27\n  , ip = r31\n  , lnk = r25\n  }, stmtsAbsState = registers:\n  { r1 = {rsp_0x10010078 - 80}\n  , r31 = {rsp_0x10010078 - 80}\n  , ip = code {0x1001009c}\n  }\nstack:\n  0x10 := return_addr\n  -0x80 := {rsp_0x10010078 + 0}}"],Function (Address {addrSegmentBase = 0, addrSegmentOffset = 268500992, addrSegoffOffset = 192, addrPretty = "0x100100c0"}) [Block (Address {addrSegmentBase = 0, addrSegmentOffset = 268500992, addrSegoffOffset = 192, addrPretty = "0x100100c0"}) "StatementList {stmtsIdent = 0, stmtsNonterm = [# 0x0 0x100100c0: mflr r0,# 0x100100c0: mflr r0,# 0x100100c0: {r0 => lnk_0\n              ;ip => 0x100100c4},# 0x4 0x100100c4: std r31, -8(r1),# 0x100100c4: std r31, -8(r1),r4 := (bv_add r1_0 (0xfffffffffffffff8 :: [64])),write_mem r4 r31_0,# 0x100100c4: {ip => 0x100100c8},# 0x8 0x100100c8: std r0, 16(r1),# 0x100100c8: std r0, 16(r1),r5 := (bv_add r1_0 (0x10 :: [64])),write_mem r5 lnk_0,# 0x100100c8: {ip => 0x100100cc},# 0xc 0x100100cc: stdu r1, -128(r1),# 0x100100cc: stdu r1, -128(r1),r6 := (bv_add r1_0 (0xffffffffffffff80 :: [64])),write_mem r6 r1_0,# 0x100100cc: {r1 => r6\n              ;ip => 0x100100d0},# 0x10 0x100100d0: or r31, r1, r1,# 0x100100d0: or r31, r1, r1,# 0x100100d0: {r31 => r6\n              ;ip => 0x100100d4},# 0x14 0x100100d4: li r3, 3,# 0x100100d4: li r3, 3,# 0x100100d4: {r3 => 0x3 :: [64]\n              ;ip => 0x100100d8},# 0x18 0x100100d8: li r4, 4,# 0x100100d8: li r4, 4,# 0x100100d8: {r4 => 0x4 :: [64]\n              ;ip => 0x100100dc},# 0x1c 0x100100dc: bl 65316,# 0x100100dc: bl 65316,# 0x100100dc: {ip => 0x10020000\n              ;lnk => 0x100100e0}], stmtsTerm = call and return to 0x100100e0\n  { r0 = lnk_0\n  , r1 = r6\n  , r3 = 0x3 :: [64]\n  , r4 = 0x4 :: [64]\n  , r31 = r6\n  , ip = 0x10020000\n  , lnk = 0x100100e0\n  }, stmtsAbsState = registers:\n  { r1 = {rsp_0x100100c0 + 0}\n  , r2 = finset {10038000}\n  , ip = code {0x100100c0}\n  , lnk = return_addr\n  }\nstack:\n  0x10 := return_addr\n  -0x80 := {rsp_0x100100c0 + 0}}",Block (Address {addrSegmentBase = 0, addrSegmentOffset = 268500992, addrSegoffOffset = 224, addrPretty = "0x100100e0"}) "StatementList {stmtsIdent = 0, stmtsNonterm = [# 0x0 0x100100e0: nop,# 0x100100e0: nop,# 0x100100e0: {ip => 0x100100e4},# 0x4 0x100100e4: std r3, 112(r31),# 0x100100e4: std r3, 112(r31),r18 := (bv_add r31_0 (0x70 :: [64])),write_mem r18 r3_0,# 0x100100e4: {ip => 0x100100e8},# 0x8 0x100100e8: addi r1, r1, 128,# 0x100100e8: addi r1, r1, 128,r19 := (bv_add r1_0 (0x80 :: [64])),# 0x100100e8: {r1 => r19\n              ;ip => 0x100100ec},# 0xc 0x100100ec: ld r0, 16(r1),# 0x100100ec: ld r0, 16(r1),r20 := (bv_add r1_0 (0x90 :: [64])),r21 := read_mem r20 (bvbe 8),# 0x100100ec: {r0 => r21\n              ;ip => 0x100100f0},# 0x10 0x100100f0: ld r31, -8(r1),# 0x100100f0: ld r31, -8(r1),r22 := (bv_add r1_0 (0x78 :: [64])),r23 := read_mem r22 (bvbe 8),# 0x100100f0: {r31 => r23\n              ;ip => 0x100100f4},# 0x14 0x100100f4: mtlr r0,# 0x100100f4: mtlr r0,# 0x100100f4: {ip => 0x100100f8\n              ;lnk => r21},# 0x18 0x100100f8: blr,# 0x100100f8: blr,r24 := (bv_shr r21 (0x2 :: [64])),r25 := (trunc r24 62),r26 := (uext r25 64),r27 := (bv_shl r26 (0x2 :: [64])),# 0x100100f8: {ip => r27}], stmtsTerm = return\n  { r0 = r21\n  , r1 = r19\n  , r31 = r23\n  , ip = r27\n  , lnk = r21\n  }, stmtsAbsState = registers:\n  { r1 = {rsp_0x100100c0 - 80}\n  , r31 = {rsp_0x100100c0 - 80}\n  , ip = code {0x100100e0}\n  }\nstack:\n  0x10 := return_addr\n  -0x80 := {rsp_0x100100c0 + 0}}"]]}